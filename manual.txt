=========    GIT    =========
# Проверить привязанный репозиторий git remote -v
# Проверить ветку git branch, сделать main, git branch -M main
# отвязать репозиторий git remote remove origin
# привязать репозиторий, git init далее git remote add origin https://github.com/GreenYA992/repo.git
# пуш git push -u origin main или -f

=========    VENV    =========
# Виртуальное окружение python - m venv .
# Запускаем виртуальное пространство - ".venv\Scripts\activate", выключить "deactivate"

========   Install   ========
python -m install Django==5.2 или (venv) pip install django==5.2
(venv) pip install django-debug-toolbar
для генерации диаграмм моделей
pip install django-extensions
чтобы сделать диаграмму в виде изображения
pip install pydotplus

=========    HELP    =========
# python manage.py help # выводит список команд
# https://docs.djangoproject.com/en/5.2/topics/db/examples/ примеры связей

=========     DB    =========
# (venv) python manage.py makemigrations проверка возможности изменений
# (venv) python manage.py migrate применение изменений

=========   Console  =========
python manage.py shell запускаем консоль
from employees.models import Skill импортируем class Skill
Skill.objects.create(name='devops') добавляем объект
from employees.models import Employee
Employee.objects.create_user(gender='M', username='Green', password='12345', first_name='Григорий', last_name='Погодин', description='test')
EmployeeSkill.objects.create(employee=Employee.objects.get(id=1), skill=Skill.objects.get(name='backend'), level=8)
Skill.objects.all() или .get(id=1) для конкретного объекта
Skill.objects.get(id=1).update(name='') Изменить название навыка
Skill.objects.all().delete() удалить все, Skill.objects.get(id=1).delete()

Пример для генерации диаграммы моделей
(venv) python manage.py graph_models -a -o models.png

========   Project   ========
# django-admin startproject django_project (Создаем проект на Django "django_project")
# python manage.py startapp employees (Создаем приложение "employees")
# python manage.py startapp workplaces (Создаем приложение "workplaces")
# Запуск сервера python manage.py runserver (python django_project/manage.py runserver)
# Создание суперпользователя python manage.py createsuperuser

# pip install black isort
# Команда "black ." форматирует все файлы .py в текущей папке и под-папках.
# Команда "isort ." Сортирует импорты в Python-файлах

# pip freeze > requirements.txt